Index: CMD/fncs.pas
===================================================================
--- CMD/fncs.pas	(revision 2960)
+++ CMD/fncs.pas	(working copy)
@@ -72,8 +72,6 @@
     fncs_publish: procedure (key:Pchar; value:Pchar);FNCS_CALL;
     // Publish value anonymously using the given key.
     fncs_publish_anon: procedure (key:Pchar; value:Pchar);FNCS_CALL;
-    // Publish function for transactive agents.
-    fncs_agentPublish: procedure (value:Pchar);FNCS_CALL;
     // Publish value using the given key, adding from:to into the key.
     fncs_route: procedure (source:Pchar; target:Pchar; key:Pchar; value:Pchar);FNCS_CALL;
     // Tell broker of a fatal client error.
@@ -86,10 +84,6 @@
     fncs_get_events_size: function:size_t;FNCS_CALL;
     // Get the keys for all values that were updated during the last time_request.
     fncs_get_events: function:ppchar;FNCS_CALL;
-    // Get one key for the given event index that as updated during the last time_request.
-    fncs_get_event_at: function (index:size_t):pchar;FNCS_CALL;
-    // Get the agent events for all values that were updated during the last time_request.
-    fncs_agentGetEvents: function:pchar;FNCS_CALL;
     // Get a value from the cache with the given key. Will hard fault if key is not found.
     fncs_get_value: function (key:Pchar):pchar;FNCS_CALL;
     // Get the number of values from the cache with the given key.
@@ -96,14 +90,10 @@
     fncs_get_values_size: function (key:Pchar):size_t;FNCS_CALL;
     // Get an array of values from the cache with the given key. Will return an array of size 1 if only a single value exists.
     fncs_get_values: function (key:Pchar):ppchar;FNCS_CALL;
-    // Get a single value from the array of values for the given key.
-    fncs_get_value_at: function (key:Pchar; index:size_t):pchar;FNCS_CALL;
     // Get the number of subscribed keys.
     fncs_get_keys_size: function:size_t;FNCS_CALL;
     // Get the subscribed keys. Will return NULL if fncs_get_keys_size() returns 0.
     fncs_get_keys: function:ppchar;FNCS_CALL;
-    // Get the subscribed key at the given index. Will return NULL if fncs_get_keys_size() returns 0.
-    fncs_get_key_at: function (index:size_t):pchar;FNCS_CALL;
     // Return the name of the simulator.
     fncs_get_name: function:pchar;FNCS_CALL;
     // Return a unique numeric ID for the simulator.
@@ -112,8 +102,6 @@
     fncs_get_simulator_count: function:longint;FNCS_CALL;
     // Run-time API version detection.
     fncs_get_version: procedure (major:Plongint; minor:Plongint; patch:Plongint);FNCS_CALL;
-    // Convenience wrapper around libc free.
-    fncs_free: procedure (ptr:pointer);FNCS_CALL;
     // faster versions for Pascal interface
     fncs_count_events: function:size_t;FNCS_CALL;
     fncs_count_values: function (key:Pchar):size_t;FNCS_CALL;
@@ -765,13 +753,10 @@
     FuncError := False;
     @fncs_initialize := find_fncs_function ('fncs_initialize');
     if not FuncError then @fncs_initialize_config := find_fncs_function ('fncs_initialize_config');
-    if not FuncError then @fncs_agentRegister := find_fncs_function ('fncs_agentRegister');
-    if not FuncError then @fncs_agentRegisterConfig := find_fncs_function ('fncs_agentRegisterConfig');
     if not FuncError then @fncs_is_initialized := find_fncs_function ('fncs_is_initialized');
     if not FuncError then @fncs_time_request := find_fncs_function ('fncs_time_request');
     if not FuncError then @fncs_publish := find_fncs_function ('fncs_publish');
     if not FuncError then @fncs_publish_anon := find_fncs_function ('fncs_publish_anon');
-    if not FuncError then @fncs_agentPublish := find_fncs_function ('fncs_agentPublish');
     if not FuncError then @fncs_route := find_fncs_function ('fncs_route');
     if not FuncError then @fncs_die := find_fncs_function ('fncs_die');
     if not FuncError then @fncs_finalize := find_fncs_function ('fncs_finalize');
@@ -778,20 +763,15 @@
     if not FuncError then @fncs_update_time_delta := find_fncs_function ('fncs_update_time_delta');
     if not FuncError then @fncs_get_events_size := find_fncs_function ('fncs_get_events_size');
     if not FuncError then @fncs_get_events := find_fncs_function ('fncs_get_events');
-    if not FuncError then @fncs_get_event_at := find_fncs_function ('fncs_get_event_at');
-    if not FuncError then @fncs_agentGetEvents := find_fncs_function ('fncs_agentGetEvents');
     if not FuncError then @fncs_get_value := find_fncs_function ('fncs_get_value');
     if not FuncError then @fncs_get_values_size := find_fncs_function ('fncs_get_values_size');
     if not FuncError then @fncs_get_values := find_fncs_function ('fncs_get_values');
-    if not FuncError then @fncs_get_value_at := find_fncs_function ('fncs_get_value_at');
     if not FuncError then @fncs_get_keys_size := find_fncs_function ('fncs_get_keys_size');
     if not FuncError then @fncs_get_keys := find_fncs_function ('fncs_get_keys');
-    if not FuncError then @fncs_get_key_at := find_fncs_function ('fncs_get_key_at');
     if not FuncError then @fncs_get_name := find_fncs_function ('fncs_get_name');
     if not FuncError then @fncs_get_id := find_fncs_function ('fncs_get_id');
     if not FuncError then @fncs_get_simulator_count := find_fncs_function ('fncs_get_simulator_count');
     if not FuncError then @fncs_get_version := find_fncs_function ('fncs_get_version');
-    if not FuncError then @fncs_free := find_fncs_function ('_fncs_free');
     if not FuncError then @fncs_count_events := find_fncs_function ('fncs_count_events');
     if not FuncError then @fncs_count_values := find_fncs_function ('fncs_count_values');
     if not FuncError then @fncs_next_event := find_fncs_function ('fncs_next_event');
